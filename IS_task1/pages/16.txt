Стадии разработки программного обеспечения — Википедия Стадии разработки программного обеспечения Материал из Википедии — свободной энциклопедии Текущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 27 января 2019 года ; проверки требуют 65 правок . Перейти к навигации Перейти к поиску В статье не хватает ссылок на источники (см. рекомендации по поиску ). Информация должна быть проверяема , иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок . ( 12 декабря 2011 ) В разработке программного обеспечения стадии разработки используются для описания степени готовности программного продукта . Также стадия разработки может отражать количество реализованных функций, запланированных для определённой версии программы . Стадии либо могут быть официально объявлены и регламентируются разработчиками, либо иногда этот термин используется неофициально для описания состояния продукта. Стадии Beta и Alpha не являются показателями нестабильности, так как присваиваются программе один раз или один раз за серию (серией, в данном случае, считается число до первой точки), в зависимости от системы разработки. Они могут присваиваться нескольким выпускаемым версиям подряд. Описание стадий разработки программного обеспечения Содержание 1 История 2 Этапы разработки 2.1 Pre-Alpha — начальная разработка 2.2 Alpha — внутренняя разработка 2.3 Beta — общественная разработка 2.3.1 Вечная бета 2.4 Release candidate — предварительная версия 3 Выпуск 3.1 Release to manufacturing / выпуск в производство 3.2 General availability / общедоступность 3.3 Release to web / веб-релиз 4 Поддержка 5 Прекращение поддержки 6 Этапы разработки по версии SourceForge / Python [ 4 ] 7 Примечания 8 Ссылки История [ править | править код ] Терминология тестирования «альфа/бета» впервые появилась в IBM . Подобные термины для разработки программного обеспечения использовались людьми, связанными с IBM, по крайней мере, с 1950-х годов, а возможно, и раньше. Тест «A» представлял собой проверку нового продукта перед публичным объявлением. Тест «B» был проверкой перед выпуском продукта в производство . Тест «C» являлся окончательным испытанием перед общей доступностью продукта. Поскольку программное обеспечение стало важной частью продукции IBM, для обозначения теста перед объявлением использовалась терминология альфа-тестирования, а бета-тест — для демонстрации готовности продукта к общей доступности. Мартин Бельский, менеджер некоторых ранних программных проектов IBM, утверждал, что он является автором данной терминологии. IBM отказалась от терминологии альфа/бета в 1960-х годах, но к тому времени она получила довольно широкое распространение. Термин «бета-тест» как обозначение тестирования, выполняемого пользователями, появился не в IBM. Вместо этого IBM использовала термин «полевой тест» ( англ. field test ). Этапы разработки [ править | править код ] Pre-Alpha — начальная разработка [ править | править код ] Начальная стадия разработки — период времени со старта разработки до выхода стадии альфа. Также так называются программы, не вышедшие ещё в стадию альфа или бета, но прошедшие стадию разработки, для первичной оценки функциональных возможностей в действии. В отличие от альфа- и бета-версий, начальный этап может включать в себя не весь спектр функциональных возможностей программы. В этом случае подразумеваются все действия, выполняемые во время проектирования и разработки программы вплоть до тестирования. К таким действиям относятся: разработка дизайна, анализ требований, собственно разработка приложения, отладка отдельных модулей. Alpha — внутренняя разработка [ править | править код ] Основная статья: Альфа-тестирование Стадия начала тестирования программы в целом специалистами-тестировщиками, обычно не разработчиками программного продукта, но, как правило, внутри организации или сообществе разрабатывающих продукт. Также это может быть стадия добавления новых функциональных возможностей. Программы на данной стадии могут применяться только для ознакомления с будущими возможностями. Как правило, альфа-тестирование заканчивается заморозкой функциональности и переходит в бета-тестирование. Beta — общественная разработка [ править | править код ] Основная статья: Бета-тестирование Стадия активного бета-тестирования и отладки программы, прошедшей альфа-тестирование (если таковое было). Программы этого уровня могут быть использованы другими разработчиками программного обеспечения для испытания совместимости. Тем не менее программы этого этапа могут содержать достаточно большое количество ошибок. Поскольку бета-продукт не является финальной версией и публичное тестирование производится на страх и риск пользователя, производитель не несёт никакой ответственности за ущерб, причинённый в результате использования бета-версии. Вечная бета [ править | править код ] Тим О’Райли , поборник открытого ПО, выводит особый вид программ — «вечная бета», когда программа находится в бета-стадии неопределённый период времени. Такой механизм уместен в интернете, где ПО обладает такими свойствами: Вместо инсталляторов программ — интернет-службы с дешёвой масштабируемостью . Необычные и уникальные подборки данных, которые становятся богаче, когда расширяется пользовательская публика. Конечные пользователи привлекаются в разработку. Их коллективный разум используется для техподдержки « длинного хвоста » с необычными запросами. Программа выходит за рамки одного устройства. Упрощённые пользовательские интерфейсы, принципы разработки и бизнес-модели. На производителе лежит особая ответственность за пользовательские данные, и многие уходят от неё, предоставляя пользователям вечную бету. Release candidate — предварительная версия [ править | править код ] Стадия-кандидат на то, чтобы стать стабильной. Программы этой стадии прошли комплексное тестирование , благодаря чему были исправлены все найденные критические ошибки. Но в то же время существует вероятность выявления ещё некоторого числа ошибок, не замеченных при тестировании. Если в течение установленного времени не будет найдено крупных недоработок — становится RTM-версией. Пример: Windows 7 RC 7100 . Выпуск [ править | править код ] После выпуска программное обеспечение обычно называется «стабильным выпуском» (stable release). Формальный термин часто зависит от способа выпуска: физический носитель, онлайн-выпуск или веб-приложение. Release to manufacturing / выпуск в производство [ править | править код ] Основная статья: Выпуск в производство Обозначение готовности программного продукта к тиражированию [ 1 ] . Это стабильная версия программы, прошедшая все предыдущие стадии, в которых исправлены основные ошибки. RTM предшествует общей доступности (GA), когда продукт выпущен для общественности. Данный термин обычно используется в определённых розничных условиях массового производства программного обеспечения, чтобы показать, что программное обеспечение соответствует определённому уровню качества и готово к массовому розничному распространению. RTM может также означать в других контекстах, что программное обеспечение было поставлено или выпущено клиенту или заказчику для установки или распространения на соответствующие компьютеры или компьютеры конечных пользователей оборудования. Этот термин не определяет механизм или объём поставки; он лишь указывает, что качество является достаточным для массового тиражирования. General availability / общедоступность [ править | править код ] Общедоступность ( англ. general availability ) или общепринятость ( англ. general acceptance , GA ) — стадия маркетинга, на которой завершены все необходимые мероприятия по коммерциализации, и программный продукт доступен для покупки, в зависимости, однако, от языка, региона, электронной или медийной доступности. Деятельность по коммерциализации может включать проверку безопасности и соответствия требованиям, а также локализацию и продвижение по всему миру. Время между выпуском в производство и общедоступностью может составлять от недели до нескольких месяцев. Это время необходимо для завершения всех мероприятий по коммерциализации, требуемых GA. На данном этапе программное обеспечение «вышло в жизнь» (gone live). Release to web / веб-релиз [ править | править код ] Выпуск в интернет (RTW) или веб-релиз является средством доставки программного обеспечения, которое использует интернет для его распространения. При этом изготовитель не задействует никакие физические носители. Веб-релизы становятся все более распространёнными по мере роста использования интернета. Поддержка [ править | править код ] В течение поддерживаемого срока службы программного обеспечения к нему выпускаются сервисные выпуски (service releases), патчи или пакеты обновления , иногда также называемые «промежуточные выпуски» (interim releases). Например, в операционных системах Windows основная фаза поддержки длится 5-6 лет с момента общедоступности [ 2 ] . В ОС типа Ubuntu существуют специальные версии LTS (Long Time Support), срок поддержки которых составляет 5 лет против 9 месяцев у обычных [ 3 ] . Прекращение поддержки [ править | править код ] На этом этапе производитель объявляет об устаревании продукта и отказа от дальнейшей поддержки. Этапы разработки по версии SourceForge / Python [ 4 ] [ править | править код ] Изначально эти 7 этапов использовались на сайте SourceForge. Впоследствии эту нумерацию подхватил PyPI , хостинг пакетов для языка Python. Планирование ( planning ). Автор зарезервировал название за проектом и начал очерчивание функциональности. Версии , как правило, не имеет. Преальфа ( pre-alpha ). Уже есть какая-то программа, дающая представление о том, что она будет делать. Идёт разработка, добавление новой функциональности, рефакторинг. Архитектура программы в любой момент может полностью измениться. В этот момент программа уже может получить версию, обычно 0.x.y. Альфа ( alpha ). Архитектура программы очевидна. Близкие к разработчику люди уже могут пользоваться программой. Идёт тестирование и доведение до продукта. Бета ( beta ). Программа полнофункциональна. Идёт тестирование, исправление ошибок и проблем с производительностью, совершенствование эргономики. Готовая/стабильная ( production/stable ). Нет критичных ошибок, оттестированы все основные сценарии использования. Идёт исправление ошибок, добавление новой функциональности. В этот момент программе можно дать версию 1.0. Зрелая ( mature ). Больше года в состоянии «готовая/стабильная», не просят крупной функциональности, нет крупных и критичных ошибок. Идёт исправление мелких ошибок. Брошенная ( inactive ). Разработка давно не ведётся. Найденные проблемы, скорее всего, не будут исправлены. Разумеется, проект могут снова взять в разработку и вернуться к одному из предыдущих этапов. Примечания [ править | править код ] ↑ RTM (Release To Manufacturing) версия Windows 10 вышла - MSoffice-Prowork.com (неопр.) . Дата обращения: 27 января 2019. Архивировано 1 октября 2020 года. ↑ Lifecycle FAQ - Windows - Microsoft Lifecycle | Microsoft Docs (неопр.) . Дата обращения: 6 марта 2019. Архивировано 8 мая 2017 года. ↑ LTS - Ubuntu Wiki (неопр.) . Дата обращения: 6 марта 2019. Архивировано 5 августа 2011 года. ↑ Stages of Software Development · Martin Thoma (неопр.) . Дата обращения: 24 марта 2022. Архивировано 17 августа 2021 года. Ссылки [ править | править код ] Free Software Project Management HOWTO (англ.) Этапы разработки программных продуктов (рус.) Разработка программного обеспечения Процесс Стадии разработки Анализ требований Проектирование Программирование Тестирование Документирование Высокоуровневые концепции Архитектура ПО Парадигма Методология Процесс разработки Качество Направления Программирование ( Аспектно-ориентированное Объектно-ориентированное Предметно-ориентированное ) Методологии разработки Agile Cleanroom CASE UP RUP OpenUP RAD Scrum SAFe Модель Spotify MSF XP DSDM Модели Итеративная Каскадная Спиральная V-Model Dual Vee Model CMM CMMI Данных Function model [англ.] IDEF Информационная Метамодель Object model [англ.] View model [англ.] UML Известные деятели Кент Бек Гради Буч Фред Брукс Уорд Каннингем Оле-Йохан Даль Том Демарко Эдсгер Дейкстра Дональд Кнут Алан Кэй Мартин Фаулер Энтони Хоар Ивар Якобсон Бертран Мейер Никлаус Вирт Эдвард Йордан Стив Макконнелл Джеймс Рамбо Барри Боэм Уоттс Хамфри [англ.] Майкл А. Джексон [англ.] Крэг Ларман Роберт Мартин Джеймс Мартин [англ.] Дэвид Парнас [англ.] Уинстон Ройс Источник — https://ru.wikipedia.org/w/index.php?title=Стадии_разработки_программного_обеспечения&oldid=138855187 Категория : Технологии организации программирования Скрытые категории: Википедия:Cite web (не указан язык) Википедия:Статьи без ссылок на источники с декабря 2011 года Википедия:Статьи без источников (тип: не указан) Навигация Поиск