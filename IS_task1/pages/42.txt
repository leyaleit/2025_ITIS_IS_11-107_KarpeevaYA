Контрактное программирование — Википедия Контрактное программирование Материал из Википедии — свободной энциклопедии Текущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 1 декабря 2014 года ; проверки требуют 37 правок . Перейти к навигации Перейти к поиску Контрактное программирование ( design by contract (DbC), programming by contract , contract-based programming ) — это метод проектирования программного обеспечения . Он предполагает, что проектировщик должен определить формальные , точные и верифицируемые спецификации интерфейсов для компонентов системы. При этом, кроме обычного определения абстрактных типов данных , также используются предусловия , постусловия и инварианты . Данные спецификации называются «контрактами» в соответствии с концептуальной метафорой условий и ответственности в гражданско-правовых договорах . Содержание 1 История 2 Описание 3 Реализация в языках программирования 3.1 Поддержка DbC на языковом уровне 3.2 Поддержка DbC с помощью сторонних библиотек 3.3 Общие инструменты 4 Примечания 5 См. также История [ править | править код ] Термин предложил Бертран Мейер в связи с разработкой языка Eiffel . Контрактное программирование выросло из формальной верификации , формальной спецификации и логики Хоара . Контрактное программирование — это не только простая метафора, указывающая способ проектирования. Условия, облегчающие применение контрактного программирования: наличие наследования и возможность динамического связывания , способность обрабатывать исключения , возможность автоматического документирования ПО . Описание [ править | править код ] Основная идея контрактного программирования — это модель взаимодействия элементов программной системы, основывающаяся на идее взаимных обязательств и преимуществ . Как и в бизнесе, клиент и поставщик действуют в соответствии с определённым контрактом . Контракт некоторого метода или функции может включать в себя: конкретные обязательства, которые любой клиентский модуль должен выполнить перед вызовом метода — предусловия , которые дают преимущество для поставщика — он может не проверять выполнение предусловий; конкретные свойства, которые должны присутствовать после выполнения метода — постусловия , которые входят в обязательства поставщика; обязательства по выполнению конкретных свойств — инвариантов, которые должны выполняться при получении поставщиком сообщения, а также при выходе из метода. Многие языки программирования позволяют учитывать такие обязательства. Контрактное программирование подразумевает эти требования критическими для корректности программ, поэтому они должны быть утверждены при проектировании. Таким образом, контрактное программирование предписывает начинать писать код с написания формальных утверждений корректности (assertions). В объектно-ориентированном программировании контракт метода обычно включает следующую информацию: возможные типы входных данных и их значение; типы возвращаемых данных и их значение; условия возникновения исключений , их типы и значения; присутствие побочного эффекта метода; предусловия, которые могут быть ослаблены (но не усилены) в подклассах; постусловия, которые могут быть усилены (но не ослаблены) в подклассах; инварианты, которые могут быть усилены (но не ослаблены) в подклассах; (иногда) гарантии производительности, например, временная сложность или сложность по памяти . При использовании контрактов сам код не обязан проверять их выполнение. Обычно в таких случаях в коде делают жёсткое падение [ уточнить ] (« fail-fast »), таким образом облегчая отладку выполнения контрактов. Во многих языках, таких как C , C++ , Delphi , PHP , такое поведение реализуется оператором assert . В конечном варианте кода это поведение может быть сохранено, либо проверки могут быть убраны чтобы повысить производительность. Юнит-тесты проверяют модуль изолированно от других, проверяя, что модуль удовлетворяет предположениям контракта, а также свои контракты выполняют используемые им модули. Интеграционные тесты проверяют, что модули работают корректно вместе. Контрактное программирование может повысить уровень повторного использования кода , поскольку обязательства модуля чётко документированы. Вообще, контракт модуля можно рассматривать также как способ документации программного обеспечения . Реализация в языках программирования [ править | править код ] Поддержка DbC на языковом уровне [ править | править код ] Языки, изначально поддерживающие средства для контрактного программирования: Active Oberon Ada 2012 Clojure Cobra Component Pascal D [ 1 ] Eiffel Fortress Kotlin Lisaac Modula-2 Modula-3 Nice Oberon-2 Oberon-07/11 Oxygene (бывший Chrome) Racket Sather Scala [ 2 ] SPARK посредством статического анализа программ на Аде Spec# SeC (расширение языка С ) JML (расширение языка Java ) C# (с .NET Framework 4.0) Zonnon Python (assert доступен в режиме отладки) Поддержка DbC с помощью сторонних библиотек [ править | править код ] C и C++ посредством CTESK , библиотеки Contract++ , препроцессора DBC for C , GNU Nana или компилятора C++ от Digital Mars . C# посредством Code Contracts Go посредством dbc Java посредством JavaTESK , iContract2, Contract4J , jContractor , Jcontract, C4J , CodePro Analytix, STclass , Jass preprocessor, OVal with AspectJ, Java Modeling Language (JML), SpringContracts для Spring Framework , или Modern Jass , Custos (недоступная ссылка) с использованием AspectJ, JavaDbC с использованием AspectJ, cofoja (разработанная [ 3 ] компанией Google ). JavaScript посредством Cerny.js Архивная копия от 27 июня 2007 на Wayback Machine , dbc-code-contracts или ecmaDebug . Lisp Common Lisp с помощью макросов или протокола метаобъектов CLOS . Scheme посредством расширения PLT, а именно тот факт, что любое нарушение контракта должно указывать на виновного и иметь точное объяснение. [1] Nemerle с помощью макросов. Perl с помощью CPAN -модулей Class::Contract (Damian Conway) или Carp::Datum (Raphael Manfredi). PHP с помощью PhpDeal Python с помощью пакета zope.interface, PyDBC, PyContracts или Contracts for Python. Ruby с помощью DesignByContract (от Brian McCallister), Ruby DBC или ruby-contract. Rust с помощью библиотеки Hoare [ 4 ] Vala с помощью GLib Общие инструменты [ править | править код ] Perfect Developer посредством Perfect specification language может проверять контракт, используя статический анализ кода и генерируя программы на языках типа C++ и Java . Примечания [ править | править код ] ↑ Walter, Bright. D Programming Language, Contract Programming (неопр.) . Digital Mars (1 ноября 2014). Дата обращения: 1 декабря 2014. Архивировано 28 ноября 2014 года. ↑ Scala Standard Library Docs - Assertions (неопр.) . EPFL. Дата обращения: 12 января 2020. Архивировано 25 декабря 2019 года. ↑ David Morgan, Andreas Leitner and Nhat Minh Le. Contracts for Java (англ.) (4 февраля 2011). Дата обращения: 12 июня 2011. Архивировано 21 марта 2012 года. ↑ GitHub - nrc/libhoare: Design by contract style assertions for Rust (неопр.) . Дата обращения: 24 февраля 2019. Архивировано 12 октября 2018 года. См. также [ править | править код ] Тестирование на основе модели В статье не хватает ссылок на источники (см. рекомендации по поиску ). Информация должна быть проверяема , иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок . ( 20 октября 2024 ) Источник — https://ru.wikipedia.org/w/index.php?title=Контрактное_программирование&oldid=141820773 Категории : Парадигмы программирования Проектирование программного обеспечения Скрытые категории: Википедия:Cite web (не указан язык) Википедия:Cite web (заменить webcitation-архив: deadlink no) Википедия:Статьи, требующие уточнения источников Википедия:Статьи с шаблонами недостатков по алфавиту Википедия:Статьи с нерабочими ссылками Википедия:Статьи без ссылок на источники с октября 2024 года Википедия:Статьи без источников (не распределённые по типам) Навигация Поиск