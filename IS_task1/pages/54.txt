Свободное программное обеспечение — Википедия Свободное программное обеспечение Материал из Википедии — свободной энциклопедии Перейти к навигации Перейти к поиску Запрос «Free software» перенаправляется сюда; см. также другие значения . Возможно, эта статья содержит оригинальное исследование . Проверьте соответствие информации приведённым источникам и удалите или исправьте информацию, являющуюся оригинальным исследованием. В случае необходимости подтвердите информацию авторитетными источниками . В противном случае статья может быть выставлена на удаление. ( 7 января 2022 ) Свободное программное обеспе́чение ( СПО , англ. free software , также software libre или libre software ), свободный софт или свободные программы [ 1 ] — программное обеспечение , пользователи которого имеют права («свободы») на его неограниченную установку, запуск, свободное использование, изучение, распространение и изменение (совершенствование), а также распространение копий и результатов изменения [ 2 ] . Если на программное обеспечение есть исключительные права, то свободы объявляются при помощи свободных лицензий . Как и бесплатное ( freeware ) и бесплатно распространяемое программное обеспечение, СПО можно использовать и обычно получить бесплатно (но конкретный распространитель может взимать плату за получение у него копий, за каналы доставки, носители — компакт-диски или дополнительные сервисные услуги). Однако freeware обычно распространяется в исполнимом виде без исходных кодов и является проприетарным ПО , а чтобы ПО было свободным (free software), получателям должны быть доступны его исходные коды , из которых можно создавать исполняемые файлы , вместе с соответствующими лицензиями. Из-за того, что словом «продажа» называют и продажу оригинала, и распространение копий за деньги, и платное лицензирование (обычно на несвободных условиях) [ 3 ] , некоторые всё же считают свободное ПО подмножеством бесплатного. Часто различают свободное ( free / libre ) и открытое ( open-source ) ПО — хотя доступность исходного кода для СПО является обязательным, а многие открытые программы являются одновременно свободными, что делает свободное ПО подмножеством открытого ПО. На практике, выбор названия часто связан с используемым языком и с целями свободности или открытости [ 4 ] [ уточнить ] [ источник не указан 1181 день ] . Движение СПО зародилось в 1983 году, когда Ричард Столлман сформировал идею о необходимости свободы использования программного обеспечения ( англ. software freedom ) пользователями. В 1985 году Столлман основал Фонд свободного программного обеспечения , чтобы обеспечить организационную структуру для продвижения своей идеи. Бизнес-модели СПО, как правило, основаны на принципе расширения возможностей — например, новые объекты применения, обучение , интеграция , настройка или сертификация . В то же время некоторые бизнес-модели , которые работают с проприетарным программным обеспечением , не совместимы со свободным программным обеспечением, особенно те, которые заставляют пользователей платить за лицензию, чтобы законно использовать программный продукт . Содержание 1 Свободные лицензии 2 Разработка ПО как научное исследование 3 Введение ограничений для ПО 4 Определение свободного ПО 4.1 Программное обеспечение с открытым исходным кодом 5 Основная общественная лицензия GNU 6 Сообщество разработчиков и пользователей 6.1 Взаимопомощь 6.2 Исправление ошибок 6.3 Системы управления версиями 7 Философия 8 Миграция на свободное ПО 9 Распространённость свободного и открытого ПО 9.1 Свободное программное обеспечение в России 9.1.1 Свободное программное обеспечение в школах 9.2 Сдерживающие факторы распространения 10 См. также 11 Примечания 12 Литература 13 Ссылки Свободные лицензии [ править | править код ] В соответствии с современным законодательством большинства стран, программный продукт и его исходный код охраняются авторским правом , которое даёт авторам и правообладателю (чаще всего правообладателем является организация — наниматель автора служебных произведений ) власть над изменением, распространением, способом использования и поведением программы, включая случаи, когда исходный код опубликован. Сила власти авторских прав в современном обществе настолько велика, что даже изучение или попытки исправления ошибок программ путём дизассемблирования могут преследоваться уголовным правом . Чтобы избавить пользователей программ от проблем, вызванных перекосом законодательства об охране результатов интеллектуальной деятельности в сторону правообладателя, авторы и правообладатели могут передать пользователям права на четыре вышеперечисленные свободы действий. Это достигается путём выпуска исходного кода программного обеспечения на условиях одной из особого рода лицензий , называемых свободными лицензиями . Несмотря на то, что по условиям свободных лицензий выданные пользователям разрешения правообладатель отозвать не может, свои права, гарантированные законодательством, авторы сохраняют. Свободное ПО легко коммерциализируется — существует множество бизнес-моделей , где исключена необходимость оплаты копий программы. Например, высокую популярность имеет бизнес-модель, когда предприниматель может заработать за счёт предоставления услуг технической поддержки . Существует и другой вариант коммерциализации для правообладателя свободного кода — реализация программных продуктов на условиях коммерческой лицензии, в случае, если клиенту необходимо интегрировать свободный код в своё проприетарное программное обеспечение и он не желает раскрытия своих разработок. Нужно заметить, что преимущества свободной разработки для пользователя не следует преувеличивать. Не все свободные программы в равной степени доступны для изменения пользователям, и это совершенно не связано с лицензией на их распространение. Важный фактор здесь — объём программы: если в ней десятки тысяч строк (как, например, в OpenOffice.org ), то даже квалифицированному пользователю потребуется слишком много времени, чтобы разобраться, что к чему. Рассчитывать же на то, что разработчики ответят на все замечания и предложения пользователя немедленным исправлением программы, тоже нельзя, поскольку они не несут перед пользователем никаких обязательств по качеству программы. В этом отношении пользователь проприетарной коммерческой программы может оказаться в лучшем положении (хотя обязательства её разработчика обычно также обусловлены лишь законами, а не его волей). Разработка ПО как научное исследование [ править | править код ] Особенность программного обеспечения состоит в том, что оно производится в одной форме — в виде исходного текста, а распространяется и используется часто в другой — в виде исполнимых программ, машинных кодов , по которым невозможно однозначно восстановить исходный текст. Чтобы эффективно изменять программу, исправлять ошибки или даже просто точно установить, что и как делает программа, необходимо располагать её исходным текстом, поскольку при компиляции в машинный код программа утрачивает удобочитаемость . Первоначально создание программного обеспечения для компьютеров было в первую очередь академическим занятием. Для специалистов в области информатики каждая программа представляла собой результат научного исследования, в некотором смысле аналогичный публикации статьи [ источник не указан 606 дней ] . Это означает, что исходный текст программы был обязательно доступен всему научному сообществу, поскольку любой научный результат должен быть проверяем , то есть подтверждаться другими исследователями и быть открытым для критики. Таким образом, процесс разработки программного обеспечения был принципиально схож с научным процессом: учёный брал существующие программы, исправлял их в соответствии со своими идеями и публиковал исправленные программы — получая при этом новый результат. Однако технология производства компьютеров развивалась не менее активно, чем программное обеспечение для них. В 1970-е годы существовало огромное разнообразие различных архитектур вычислительных машин, различавшихся также производительностью и ценой. Естественно, для каждой архитектуры приходилось разрабатывать отдельный набор программного обеспечения. С середины 1970-х в большинстве американских университетов для академических разработок использовались компьютеры архитектуры PDP-10 , что позволяло сотрудникам разных университетов использовать разработки друг друга на своих машинах. Сотрудники лаборатории искусственного интеллекта Массачусетского технологического института (MIT) в конце 1970-х разработали для PDP-10 собственную операционную систему Incompatible Timesharing System [англ.] (ITS) — (с англ. — «несовместимая система с разделением времени») и очень большой набор программ для неё. Исходные тексты написанных в MIT программ были общедоступны, сотрудники других университетов пользовались их исходными текстами и присылали им исправления, всё программное обеспечение в этих лабораториях было полностью академическим. Введение ограничений для ПО [ править | править код ] В условиях огромного многообразия архитектур компьютеров программное обеспечение составляло неотъемлемую часть самой машины, причём далеко не самую дорогостоящую часть. Производители компьютеров поставляли их вместе с основным программным обеспечением — по крайней мере, [ уточнить ] с операционной системой . Производство компьютеров было наукоёмким, но в основе своей коммерческим предприятием. В ситуации, когда [ прояснить ] программное обеспечение является объектом продажи наравне с предметами обихода, на него распространяются уже не только законы научной разработки, но и свойства материальных предметов, которыми можно торговать, обмениваться, право владения и пользования которыми стоит охранять законодательно. [ нейтральность? ] Так программное обеспечение попало в разряд интеллектуальной собственности : то есть исходный текст программы стал рассматриваться как произведение. Чтобы защитить [ неизвестный термин ] свои интересы, производители компьютеров и программного обеспечения используют лицензии — вид договора между обладателем авторских прав и пользователем (покупателем) программного обеспечения. Подобные договоры заключались и с университетами: например, университету передавались исходные тексты программ и право их изменять, но запрещалось распространять их за пределами университета. Подобные ограничения означали, что тексты соответствующих программ не могли открыто обсуждаться в сообществе, то есть не существовали для научной разработки. Были у компьютеров и программного обеспечения покупатели и вне академической среды — например, банки. Таким пользователям [ источник не указан 3687 дней ] не столь важно получить исходные тексты программ, они заинтересованы в программном обеспечении как в законченном продукте и готовы платить деньги за надёжные и удобные программы. Однако компьютеры развивались очень быстро, и бывшие вполне современными в 1970-е PDP-10 к началу 1980-х уже устарели и значительно отставали по производительности от более современных машин. Однако ни для одной из новых архитектур уже не было операционной системы и прочего программного обеспечения, разработанного исключительно в академической среде и по её правилам. Теперь университеты должны были покупать новые компьютеры с новым программным обеспечением и выполнять условия лицензии, ограничивающей их права на разработку и распространение ПО — иначе говоря, ограничивающей возможность научной модели разработки и распространения программного обеспечения. В это время в лаборатории искусственного интеллекта MIT разрабатывались так называемые LISP-машины , умевшие на аппаратном уровне интерпретировать язык программирования, похожий на LISP — развитый и перспективный язык программирования. На LISP же была написана операционная система для таких машин и всё программное обеспечение для них. В начале 1980-х некоторые сотрудники лаборатории искусственного интеллекта выкупили у MIT права на LISP-машины и математическую систему Macsyma и основали собственные коммерческие компании для дальнейшей разработки в этой области. Очень многие сотрудники лаборатории перешли работать в эти компании, после чего все их дальнейшие разработки уже становились закрытыми для научного сообщества. Новые LISP-машины распространялись с лицензиями, запрещающими пользователям модифицировать и распространять исходные тексты программ. Программы, которые раньше для сотрудников MIT были аналогом научных публикаций, стали принадлежащим кому-то продуктом. Ричард Столлман , основатель движения свободного ПО. Одному из сотрудников, оставшихся в лаборатории искусственного интеллекта MIT, Ричарду Столлману , такое положение дел казалось недопустимым нарушением открытого научного процесса разработки программного обеспечения. Он в одиночку пытался в рамках прежней академической модели развивать LISP-машины и открыто реализовывать изменения, аналогичные сделанным в рамках закрытой коммерческой разработки, чтобы LISP-машины MIT могли конкурировать с аналогами. Конечно, эта попытка угнаться за активной разработкой целой компании [ какой? ] была обречена на неудачу. Тогда в поисках единомышленников Ричард Столлман создаёт некоммерческую организацию « Фонд свободного программного обеспечения ». Своей основной целью фонд ставил сохранение программного обеспечения, процесс разработки которого всегда будет гарантированно открытым, а исходные тексты всегда доступны. Более масштабная цель фонда — разработка операционной системы, целиком состоящей из открыто разрабатываемого программного обеспечения. Декларируя такую цель, Столлман, фактически, хотел вернуть представлявшееся ему идеальным состояние, когда в MIT работали в собственной операционной системе для PDP-10. Операционная система, разрабатываемая в рамках фонда, должна была стать совместимой с операционной системой UNIX . К началу 1980-х UNIX очень широко использовалась, в том числе и в академической среде. Для этой операционной системы существовало много программ, свободно распространявшихся в научном сообществе, поэтому хотелось, чтобы эти программы работали и в новой — свободной — операционной системе. Эта будущая операционная система получила название GNU . Фонд свободного ПО в прошлом делил несвободное ПО на полусвободное (такое, которое отличается от свободного лишь запретом на коммерческое использование) и проприетарное (собственническое, англ. proprietary ) (которое не имеет всех четырёх свобод, даже если коммерческое использование разрешено); но это разделение больше не используется [ 5 ] [ 6 ] . Иногда к несвободному ПО относят и всё « коммерческое ПО », считая свободное ПО видом бесплатного, однако это неверно: получать выгоду от программы можно не только продажей несвободных лицензий. Определение свободного ПО [ править | править код ] Основная статья: Определение свободного программного обеспечения Чтобы взаимодействие разработчиков происходило по принципу научного сотрудничества, необходимо было обеспечить, чтобы исходные тексты программ оставались доступными для чтения и критики всему научному сообществу с сохранением авторства произведений. Для этого Ричард Столлман сформулировал понятие свободное программное обеспечение , в котором отразились принципы открытой разработки программ в научном сообществе, сложившемся в американских университетах в 1970-е годы. Столлман явно сформулировал эти принципы, они же — критерии свободного программного обеспечения . Эти критерии оговаривают те права, которые авторы свободных программ передают любому пользователю: программу можно свободно использовать с любой целью (« нулевая свобода »); можно изучать, как программа работает, и адаптировать её для своих целей (« первая свобода »). Условием этого является доступность исходного текста программы; можно свободно распространять копии программы — в помощь товарищу (« вторая свобода »); программу можно свободно улучшать и публиковать свою улучшенную версию — с тем, чтобы принести пользу всему сообществу (« третья свобода »). Условием этой третьей свободы является доступность исходного текста программы и возможность внесения в него модификаций и исправлений. Возможность исправления ошибок и улучшения программ — самая важная особенность свободного и открытого программного обеспечения, что просто невозможно для пользователей закрытых частных программ даже при обнаружении в них ошибок и дефектов, количество которых, как правило, неизвестно никому. Только удовлетворяющая всем четырём перечисленным принципам программа может считаться свободной программой, то есть гарантированно открытой и доступной для модернизации и исправления ошибок и дефектов, и не имеющей ограничений на использование и распространение. Нужно подчеркнуть, что эти принципы оговаривают только доступность исходных текстов программ для всеобщего использования, критики и улучшения, и права пользователя, получившего исполнимый или исходный код программы, но никак не оговаривают связанные с распространением программ денежные отношения, в том числе не предполагают и бесплатности . В англоязычных текстах здесь часто возникает путаница, поскольку слово «free» по-английски означает не только «свободное», но и «бесплатное», и нередко употребляется по отношению к бесплатному программному обеспечению , которое распространяется без взимания платы за использование, но недоступно для изменения пользователями и сообществом, потому что его исходные тексты не опубликованы. Такое бесплатное ПО вовсе не является свободным. Наоборот, свободное ПО вполне можно распространять (и распространяют), взимая при этом плату, однако соблюдая при этом критерии свободы: каждому пользователю предоставляется право получить исходные тексты программ без дополнительной платы (за исключением цены носителя), изменять их и распространять далее. Всякое программное обеспечение, пользователям которого не предоставляется такого права, является несвободным — независимо от любых других условий. Программное обеспечение с открытым исходным кодом [ править | править код ] Открытый доступ к исходным текстам программ является ключевым признаком свободного ПО, поэтому предложенный несколько позднее Эриком Реймондом термин open source software (ПО с открытым исходным кодом) некоторым представляется даже более удачным для обозначения данного феномена, чем изначально предложенный Столлманом «free software». Столлман настаивает на различии этих двух понятий, так как слова open source указывают лишь на наличие одного, не самого важного (хотя и необходимого для реализации двух из четырёх свобод), по его мнению, из свойств, присущих свободному ПО — возможности увидеть исходный код. [ 7 ] Основная общественная лицензия GNU [ править | править код ] Основная статья: GNU General Public License Логотип FSF - Фонда свободного ПО - разработчика GNU GPL лицензий Декларировав критерии свободного ПО, члены Фонда свободного ПО стали распространять свои программы в соответствии с этими принципами, никак не оформляя это документально: иначе говоря, первоначально свободные программы распространялись вообще без лицензии. Однако произошедший с самим Ричардом Столлманом прецедент (см. ниже) убедил его в том, что документальное оформление необходимо для свободного ПО. Ричард Столлман занимался разработкой текстового редактора Emacs на основе исходных текстов Джеймса Гослинга . Тогда Гослинг свободно раздавал свои исходные тексты всем заинтересованным. Однако в какой-то момент Гослинг продал права на распространение Emacs компании UniPress [ 8 ] , и эта компания попросила Столлмана прекратить распространение его версии Emacs, так как права принадлежат им. [ стиль ] Этот инцидент заставил Столлмана переписать заново те части исходного текста Emacs, которые теперь принадлежали UniPress, после чего он разработал собственную лицензию на своё программное обеспечение. Логотип GNU GPLv3 Лицензия, сформулированная Столлманом, должна была работать так же, как и лицензии на несвободное программное обеспечение: это типовой договор автора программы (обладателя авторских прав ) с пользователем, в котором автор, среди прочего, оговаривает права пользователя по отношению к программе. В отличие от типовой собственнической лицензии, лицензия Столлмана предоставляет пользователю права, являющиеся критериями свободной программы: получать исходные тексты программ, изменять их, распространять изменённые и неизменённые версии. Впоследствии лицензия Столлмана получила название GNU General Public License («Основная общественная лицензия GNU»), сокращённо GNU GPL или просто GPL. В этой лицензии оговаривается также принципиальное для Столлмана защитное условие распространения свободного ПО: ни один пользователь, сделавший модифицированную версию свободной программы, не имеет права распространять её, не соблюдая всех принципов свободного ПО, то есть делать модификацию свободной программы несвободной. Чтобы подчеркнуть отличие такой лицензии, которая использует ЗоАП (copyright) для побуждения к сохранению свободы, от типовых собственнических лицензий, которые используют ЗоАП для ограничения свободы, был придуман термин copyleft ( копилефт ) — игра слов, построенная на значениях английских слов right и left . [ 9 ] Действие копилефта основано на том, что производные работы в большинстве случаев наследуют лицензии своих составляющих; если в программе используется небольшая часть стороннего кода под GPL, то вся программа и её производные должны распространяться под GPL, пока они являются производными этого кода. При этом в GPL есть раздел, позволяющий требовать сохранения в коде имён авторов, запрещать использование этих имён в рекламе, предупреждать о зарегистрированных товарных знаках и т. п., что позволяет комбинировать работы под GPL с работами под многими свободными некопилефтными лицензиями (например, некоторыми из лицензий BSD ), не создавая значительных ограничений и не нарушая лицензии, — но производные от результата, являясь производными от работы под GPL, уже не могут (без отдельного разрешения правообладателей) распространяться на условиях данной некопилефт‐лицензии без соблюдения условий GPL — в том числе и как неотъемлемая часть несвободного ПО. По этой причине лицензии, подобные GNU GPL, иногда называют также «вирусными лицензиями» : они как бы «заражают» программу, становясь её неотъемлемой частью. Сообщество разработчиков и пользователей [ править | править код ] См. также: Сообщество свободного программного обеспечения Главное условие существования свободного ПО — всё-таки не лицензия, а люди, которые готовы бесплатно делиться текстами своих программ и совершенствовать тексты чужих. Свободное ПО унаследовало модель открытой научной разработки, а вместе с ней — и академическую модель взаимодействия между учёными, вылившуюся в специфическую организацию сообщества разработчиков и пользователей. Написать большую программу в одиночку довольно сложно и даже не всегда возможно, особенно если автор занимается этим в свободное от работы время. Большинство современных свободных программ пишется группой разработчиков. Даже если начинал писать программу один человек и она оказалась интересной, к разработке могут присоединиться активные пользователи. Очень многие свойства сообщества разработчиков и пользователей свободных программ проистекают из того, что все его участники обычно занимаются этой программой из интереса или потому, что эта программа — необходимый для них инструмент (например, зарабатывания денег или по другой причине). Время, потраченное ими на программу, не оплачивается, поэтому нет никакой надежды, что обстоятельства не переменятся и разработка не прекратится вовсе. Нередки случаи, когда разработка программы начинается благодаря одному автору-энтузиасту, который привлекает многих к участию в разработке, а потом энтузиазм лидера гаснет, а вместе с ним затухает и разработка. Сегодня существуют тысячи программ, так никогда и не достигших версии 1.0, хотя «выгорание» лидеров и не единственная этому причина. Кроме того, программа может быть необходимой, но «неинтересной», а потому не найдётся и свободных разработчиков. [ 10 ] Место свободных программ на сегодняшнем рынке ПО очень значительно, и многие коммерческие организации и государственные структуры используют свободное ПО прямо или опосредованно. Собственно, опосредованно все пользователи Интернета задействуют, например, свободную программу BIND , предоставляющую службу DNS . Многие организации, особенно предоставляющие услуги через Интернет, используют свободный web-сервер Apache , от работы которого непосредственно зависит их прибыль, не говоря уже о серверах на платформе Linux . Главный недостаток с точки зрения коммерческого пользователя: разработчики свободных программ не несут никаких обязательств по качеству программы, кроме моральных. Поэтому, сегодня большие корпорации, например, Intel или IBM , находят необходимым поддерживать проекты по разработке свободного ПО, оплачивая сотрудников, которые работают в рамках этих проектов. Несмотря на то, что корпорации начинают все чаще платить разработчикам свободного ПО, у его разработчиков обычно бывает другая, внутренняя мотивация: это может быть желание учиться, чувство принадлежности к сообществу свободного ПО или профессиональная идентичность [ 11 ] . Взаимопомощь [ править | править код ] У любого пользователя программного обеспечения непременно возникают вопросы, когда он пытается применить его для решения своих задач. Пользователь несвободной (патентованной) программы платит за неё производителю, который иногда взамен предоставляет ему некоторые гарантии, одна из которых — отвечать на вопросы о работе программы. Специально для этого производитель организует службу поддержки , которая по телефону, электронной почте и другим средствам связи отвечает на вопросы пользователей. Пользователь свободно распространяемой программы не получает вместе с ней никаких гарантий: автор сделал её исходный текст открытым для общества, но при этом не взял на себя обязательств объяснять всем, как работает программа. [ 12 ] Хотя любая несвободная программа в 99 % случаев тоже поставляется «как есть» и без гарантий. Поскольку сообщество пользователей большинства программ распределено по всему миру, для организации взаимодействия в нём наиболее активные пользователи (а зачастую и сами авторы) организуют (реже — используют существующие) списки рассылки , форумы и другие средства общения в Интернете . Для накопления и рубрикации информации по программе (в частности, списков часто задаваемых вопросов — ЧаВо ; или англ. FAQ — frequently asked questions), а также организации более сложных форм взаимодействия (совместной разработки, систем отслеживания ошибок ) создаются веб-сайты , посвящённые программам. Исправление ошибок [ править | править код ] В любой достаточно сложной программе непременно имеются ошибки и дефекты, количество которых обычно неизвестно. Многие крупные производители ПО создают и оплачивают работу отдела контроля качества (QA — Quality assurance ), который контролирует соответствие процесса разработки ПО определённым требованиям, выполнение которых позволяет снизить вероятность появления ошибок в ПО (например, требованиям стандарта DO-178B , который применяется при разработке ПО для авиационных систем). Однако в настоящее время отсутствуют методы, позволяющие полностью гарантировать отсутствие ошибок в достаточно сложном ПО (существуют формализованные критерии сложности ПО). Пользователь закрытой собственнической программы, столкнувшись с ошибкой, не всегда может выявить её причину и исправить ошибки (поскольку ему недоступны ни исходные тексты программы, ни даже отладочная информация ), но, скорее всего, способен описать ошибку и условия, в которых она происходит. Пользователь может сообщить об ошибке производителю программы (обычно посредством обращения всё в ту же службу поддержки ), и если там решат, что ошибка действительно в программе, а не в работе пользователя, о ней будет сообщено разработчикам. В итоге пользователь может долго ожидать исправления ошибки в последующих версиях программы. Нередко обновление собственнической программы приравнивается производителем к приобретению новой копии, что влечёт за собой соответствующие издержки и нарушение закона о защите прав потребителей . Диагностика ошибки, произошедшей на компьютере пользователя, — задача не из лёгких, поскольку у сотрудников службы поддержки (и тем более программистов фирмы) может не быть доступа к этому компьютеру. Поэтому отделами поддержки широко практикуются программы, выдающие разнообразную информацию о компьютере пользователя, а в сложных случаях и пресловутая отладочная информация (сотрудник просит пользователя прогнать программу в «диагностическом режиме» (как правило, при помощи недокументированной настройки, либо пользователю присылается отладочная версия нужного модуля) и отправить ему полученный файл отчёта). У типичной свободной программы (то есть, некоммерческой и/или разрабатываемой небольшой компанией или частным лицом) обычно нет оплачиваемого отдела контроля качества. Значит, пользователь может столкнуться с ещё большим количеством ошибок, чем в типичной коммерческой проприетарной программе. Тем актуальнее для него возможность сообщить об ошибке разработчикам программы. Раньше в сопровождающей программу документации было принято указывать электронный адрес, по которому разработчики принимали сообщения об ошибках (bug report). Некоторые вводили стереотипную форму для таких сообщений, чтобы облегчить и автоматизировать их обработку. Уже это требует существенно более высокой связности сообщества во всём мире, существенно большей, чем достаточно для закрытой разработки. Разработчики и контролёры‐испытатели проприетарного продукта могут ходить на службу в один и тот же офис и там обмениваться информацией или тратить определённую долю рабочего времени на составление и анализ строгих отчётностей, содержащих сообщения об ошибках и отчёты об устранении неисправностей. Такая организация труда эффективна, если круг разработчиков невелик и ввести общий распорядок относительно легко. Для открытого же проекта круг и взаимное расположение потенциальных разработчиков не ограничены ничем, поэтому эффективность разработки в гораздо большей степени зависит от того, насколько просто всем членам сообщества договариваться между собой, а также от «сознательности» пользователей. Простому и упорядоченному приёму и перенаправлению сообщений об ошибках служат системы отслеживания ошибок (bug tracking system), самые известные из которых разработаны участниками больших проектов для себя, а благодаря свободным лицензиям используются повсеместно. Таковы GNUTS (разработанная в GNU), Bugzilla ( Mozilla Foundation ), JitterBug (проект Samba ) или Debian BTS . Более ранние версии ориентируются на электронную почту, более поздние включают в себя web-интерфейс. Например, при помощи Bugzilla организуется сайт в Интернете , на котором пользователь может заполнить форму сообщения об ошибке. Каждое сообщение имеет свой номер, по которому можно попасть на «персональную» страницу данной ошибки, где отражаются все происходящие по её поводу события, от первоначального сообщения (открытия) до исправления (закрытия). При каждом изменении в состоянии ошибки Bugzilla рассылает всем заинтересованным лицам (включая, естественно, сообщившего об ошибке и занимающихся данной программой разработчиков) письма по электронной почте. Поскольку Bugzilla позволяет оставлять комментарии и прикладывать файлы, она является полноценным средством для общения пользователя с разработчиком по поводу ошибки в программе. Принципиальное преимущество пользователя свободной программы заключается в том, что у него, в отличие от пользователей несвободных программ, всегда есть возможность заглянуть в исходные тексты. Конечно, для многих пользователей исходные тексты не более понятны, чем машинный код. Однако при достаточном уровне познаний в программировании пользователь может сам установить причину ошибки в программе, а то и устранить её, исправив соответствующим образом исходный текст. А если пользователь заинтересован в развитии программы, то с его стороны будет разумно не только сообщить автору об ошибке, но и прислать ему свои исправления к исходному тексту программы: автору останется только применить эти исправления к тексту программы, если он найдёт их корректными и уместными. Пересылать автору исправленный текст программы целиком непрактично: он может быть очень большим (десятки тысяч строк), и автору будет нелегко разобраться, что же изменено (а вдруг изменения сделаны неграмотно?). Чтобы облегчить и автоматизировать процесс внесения исправлений, Ларри Уолл в 1984 году разработал утилиту patch («заплатка»), которая в формализованном (но хорошо понятном человеку) виде описывает операции редактирования, которые нужно произвести, чтобы получить новую версию текста. С появлением этой утилиты пользователь, обнаруживший и исправивший ошибку в программе, мог прислать автору небольшую заплатку, по которой автор мог понять, какие изменения предлагаются, и автоматически «приложить» их к своему исходному тексту. С появлением утилиты patch гораздо больше пользователей стало включаться в разработку программ с доступным исходным текстом, немалую роль и здесь сыграла сеть Usenet . [ 13 ] В конце концов, данный способ исправления стал общеупотребительным и применяющимся не только к исходному коду программы, но и непосредственно к скомпилированному исполнимому коду в случае закрытого ПО, а слово «патч» стало нарицательным . Патчи (файлы-заплатки с исправлениями) — обязательный атрибут сегодняшней разработки любых программ любой сложности. [ 14 ] Если пользователю программы не хватает в ней какой-то функции, то при должной квалификации он вполне может запрограммировать её сам и включить в исходный текст программы, либо заплатить за это кому‐то ещё. Естественно, ему выгодно, чтобы его дополнение попало в «главный», авторский вариант программы (его называют upstream) и появлялось во всех последующих версиях: можно точно так же оформить его в виде патча и выслать автору. Этой возможности лишён пользователь несвободной программы, даже если он достаточно квалифицирован. Единственный способ включить в программу нужную ему функцию — обратиться к производителю (если программа проприетарная) с соответствующей просьбой и надеяться, что производитель сочтёт предложенную функцию действительно необходимой. Чем больше у свободной программы активных пользователей, готовых вносить исправления и дополнения и делиться ими, тем надёжнее работает и быстрее развивается программа. Причём такая свободная модель отслеживания и исправления ошибок для программы, у которой тысячи активных пользователей, может оказаться гораздо более эффективной, чем у любой проприетарной программы: ни одна компания не может себе позволить такой огромный штат сотрудников в отделе контроля качества. Поэтому действительно популярная свободная программа может оказаться гораздо надёжнее проприетарных аналогов. Системы управления версиями [ править | править код ] Чтобы разработчики могли не только вносить отдельные исправления, но и вообще всю разработку вести совместно, нужны специальные инструменты. Помимо патчей, для организации совместной разработки ПО применяются системы управления версиями . Функции системы контроля версий состоят в том, чтобы организовать доступ к исходным текстам программы для нескольких разработчиков и хранить историю всех изменений в исходных текстах, позволяя объединять и отменять изменения и пр. [ 15 ] Самая ранняя свободная система управления версиями — RCS — использовалась ещё на заре свободного ПО абонентами сети Usenet , затем на смену ей пришла более развитая CVS , но сегодня и она считается во многом устаревшей и всё чаще заменяется Subversion , Git и другими. Философия [ править | править код ] Дополнительные сведения: Философия движения свободного программного обеспечения В европейской культуре долго вырабатывались правила собственности по отношению к материальным ценностям . И вполне логично, что эти правила были распространены на ценности нематериальные — в том числе и на программные продукты, когда они начали представлять самостоятельную ценность. [ нейтральность? ] Однако, у программных продуктов есть принципиальное отличие от материальных объектов — их можно легко копировать. Создание же копии материального продукта часто почти равно затратам на создание оригинала. Из-за указанного различия для ПО не действует принцип «пользоваться вещью одновременно может только один человек» (и использование её кем-то другим автоматически наносит первому ущерб из-за неполучения блага от неё), по причине которого и существует понятие «хозяин». Поэтому попытка и тут действовать по этому принципу — закреплять право использования программы за одним каким-то человеком — интуитивно воспринимается [ 16 ] как противоречащая природе вещей. Неудивительно, что возникает множество неурядиц, каждую из которых приходится решать искусственными, а зачастую и противоестественными методами. Классическим таковым методом является де-юре сохранение прав на ПО за производителем, который как бы даёт ПО своим пользователям во временное пользование. В этом случае использование нелицензионного ПО по сути приравнивается к концепции права англоязычных стран, известной как theft of services. Но эта концепция не имеет аналогов в иных национальных культурах, например, российской, и именно по причинам, приведённым на 2 абзаца выше (хозяин не лишается возможности использования вещи, что и есть главное негативное последствие кражи). В российском праве theft of services любых видов есть не более чем административное правонарушение, при этом за нелицензионное ПО предусмотрена уголовная ответственность, что звучит диссонансом в российской культуре. Но иногда, например, приходится симулировать «ущерб из-за неполучения блага», который «наносится» «хозяину» программы при её безущербном копировании или возврате денег при обнаружении ошибок и дефектов в программах. Обычно это — «упущенная выгода», то есть та прибыль, которую хозяин мог бы получить, но не получил из-за того, что продукт скопировали. Приходится изобретать хитроумную аппаратуру , мешающую копированию или причиняющую при этом ущерб. Приходится вводить в законодательство особую категорию прав — условно назовём её «патент» [ 17 ] — ограничивающую злоупотребления — и свободу — всего человечества в пользу хозяина патента. Причём далеко не всегда хозяин патента и автор изобретения — один и тот же человек (в таких случаях противоестественность данных мер лишь усугубляется). Существует и точка зрения противников вышесказанного. Так, например, последовательная легализация theft of services означает бесплатность всех услуг, что означает скорее всего содержание всей этой сферы госбюджетом, а в таковом случае, во-первых, за услуги платят все налогоплательщики из своих налогов, причём без рыночного механизма влияния потребителя на производителя («кушай что дают»), во-вторых, это отвлекает госсредства от задач национальной важности, в-третьих, отсутствие рыночной конкуренции приведёт к нивелированию качества всех услуг к некоему дешёвому и не очень качественному минимуму (возможно даже возложение части оказания услуги на потребителя в виде «доделай сам»). Всё то же самое относится и к идее тотальной бесплатности всего ПО. Несвободные программы называют « проприетарными » (от англ. proprietary ) или «собственническими». Иногда их неправильно называют просто « коммерческими », что неверно: получать выгоду от программы можно различными способами и многие успешные свободные проекты это подтверждают. Миграция на свободное ПО [ править | править код ] Основная статья: Миграция на свободное программное обеспечение Переход на конкретное свободное ПО, а также общий тренд постепенного повышения распространённости СПО среди пользователей, часто называют миграцией на свободное ПО. Распространённость свободного и открытого ПО [ править | править код ] Информация в этой статье или некоторых её разделах устарела . Вы можете помочь проекту, обновив её и убрав после этого данный шаблон. ( 14 октября 2019 ) Ubuntu — одна из самых популярных свободных ОС, дистрибутив Linux. Не специализирующиеся на компьютерной тематике СМИ , как правило, отождествляют открытое и свободное ПО, используют их как синонимы. Поэтому данные по распространённости открытого и свободного ПО обычно приводятся вместе. СПО активно используется в Интернете. Например, самый распространённый веб-сервер Apache является свободным, Википедия работает на MediaWiki , также являющемся свободным проектом. СПО используется в Министерстве юстиции Бельгии, в котором уже половина компьютеров работает под управлением Linux , и полицией Франции, которая полностью перешла на использование GendBuntu — дистрибутива, основанного на Ubuntu. Перевести все компьютеры этого учреждения на свободное ПО планируется до конца 2009 года . Программа перехода на СПО была успешно реализована в Мюнхене . Аналогичная программа имела место в Берлине , но впоследствии было принято решение использовать гибридную инфраструктуру из коммерческого и свободного программного обеспечения. [ 18 ] По состоянию на 2009 год открытым системам уже принадлежит большая часть (более 60 %) рынка мобильных приложений. По прогнозу Juniper Research, к 2014 году количество смартфонов с открытыми ОС возрастёт в 2 раза (с 106 до 223 миллионов). [ 19 ] Свободное программное обеспечение в России [ править | править код ] Свободное программное обеспечение, в любом случае, может свободно устанавливаться и использоваться на любых компьютерах. Использование такого ПО свободно везде: в школах, офисах, вузах, на личных компьютерах и во всех организациях и учреждениях, в том числе, и на коммерческих и государственных, в России и в странах СНГ . Правительство РФ распоряжением от 17 декабря 2010 года № 2299-р [ 20 ] утвердило план перехода федеральных органов исполнительной власти и федеральных бюджетных учреждений на использование свободного программного обеспечения на 2011—2015 годы [ 21 ] . В учреждения Министерства Обороны России, а также в российских посольствах в других странах используется операционная система МСВС . Данная ОС, сделанная на основе Red Hat Linux с незначительными изменениями, не является свободным ПО, её исходные коды закрыты. Логотип OpenDocument Format С 1 июня 2011 года действует ГОСТ Р ИСО/МЭК 26300-2010 на формат OpenDocument . С 1 января 2012 года действует ГОСТ Р 54593-2011 «Информационные технологии. Свободное программное обеспечение. Общие положения» [ 22 ] . В начале 2012 года около 22 тысяч рабочих мест в поликлиниках Москвы планировалось [ обновить данные ] оснастить ПК с Alt Linux . [ 23 ] 15 апреля 2013 года начался сбор подписей на государственное финансирование обучения свободному программному обеспечению для населения России [ 24 ] . 12 марта 2014 года подписан Федеральный закон № 35-ФЗ с поправками в четвёртую часть ГК РФ, регулирующих использование на территории РФ открытых лицензий [ 25 ] . 3 апреля 2014 года Управление информационных технологий Федеральной службы судебных приставов объявило об использовании собственного специализированного Linux -дистрибутива GosLinux (на базе CentOS ) в рамках проводимой «политики внедрения свободного программного обеспечения и импортозамещения информационных технологий» [ 26 ] [ 27 ] . Свободное программное обеспечение в школах [ править | править код ] В трёх регионах России в 2008 году развёрнуты эксперименты по внедрению и использованию в средних школах базовых пакетов программ для кабинетов информатики и вычислительной техники, и начата подготовка учителей и преподавателей информатики к работе со свободным программным обеспечением в среде Windows и Linux [ 28 ] . Сдерживающие факторы распространения [ править | править код ] Пользователи, которые бы иначе предпочли свободное ПО несвободному, продолжают использовать несвободное по следующим причинам: В странах, где неавторизованное распространение объектов авторского права является обычным делом, нет ни юридического, ни экономического стимула переходить на свободное ПО. К тому же пользователи, привыкшие к проприетарному ПО , не хотят тратить время на изучение свободного аналога, если это не даёт им прямой выгоды в короткий срок. В некоторых отраслях мало или вообще нет свободного ПО высокого качества. [ 29 ] А именно: Программное обеспечение, в котором доля работы программиста мала по сравнению с работой художника , редактора и т. д. Например: квесты и многие другие жанры игр , электронные словари . Развивающиеся отрасли, для которых мало пригодных к использованию общепринятых алгоритмов, — машинный перевод , распознавание речи с большим словарём и, в меньшей степени, синтез речи . Кроме того, требуется ручная обработка большого количества текстовых или аудиоданных. Отрасли, связанные со сложной высокооплачиваемой работой (фотообработка, инженерное проектирование ), — так как создать программу, близкую по сложности и качеству к проприетарным стандартам де‐факто очень трудно, то свободных аналогов меньше, чем в других отраслях, и пользователю не всегда удаётся найти подходящий для него продукт. Отрасли, в которых существуют платные или собственнические стандарты де-факто , например Pantone в допечатной подготовке . Для аппаратного обеспечения в отраслях, где господствует лишь несколько производителей, в свободном доступе часто отсутствуют не только драйверы, но и спецификации. Разнообразие лицензий тоже может иметь отрицательное влияние. Пример (не очень удачный): драйвер файловой системы ZFS выпущен под лицензией, несовместимой с GNU GPL 2, и потому долгое время мог быть использован [ уточнить ] на самой популярной платформе для СПО — Linux — только посредством FUSE , приводившего к сильному замедлению производительности этой ФС. Однако вскоре вышла и реализация ZFS в виде модуля ядра для Linux (то есть полноценно), единственным условием использования которого является недопустимость их совместного (слитного) распространения. [ 30 ] Проприетарное ПО из-за маркетинговых методов настолько популярно, что пользователи не знают о существовании других подобных программ. Проприетарное ПО зачастую использует собственные форматы файлов и протоколы обмена, описание которых отсутствует в свободном доступе. Поэтому переход может быть затруднён проблемами совместимости с другим ПО или с существующими форматами файлов (вариант замыкания на поставщике ). Некоторое проприетарное ПО как требует огромных финансовых затрат на создание и поддержание в нужном качестве, так и либо чрезвычайно сложно, либо содержит большое количество различных патентов из других источников, к примеру драйверы видеоускорителей. В свою очередь, из-за стартовой, малой процентной распространённости открытого решения компания-производитель не способна существенно повысить финансирование, а значит, предоставить качественную поддержку этой области. Как результат, количество ПО, использующего и требующего качественных драйверов, невелико — что, соответственно, сдерживает распространённость открытых решений. В связи с тем драйвера для видеоускорителей под Linux , хоть и предоставляются всеми крупными компаниями, но являются или полностью закрытыми и менее эффективными, чем их варианты под Windows , или открытыми, но сознательно создаваемыми менее производительными и функциональными [ 31 ] . См. также [ править | править код ] Open core BundesTux Free Standards Group Открытое аппаратное обеспечение Свободная музыка SourceForge.net Столлман, Ричард Мэттью#Свободное ПО и терминология Определение свободных произведений культуры День Свободы Программного обеспечения Gratis versus libre Carrer del Programari Lliure (улица Свободного программного обеспечения) [кат.] Примечания [ править | править код ] ↑ Stallman, Richard. Free Software, Free Society: Selected Essays of Richard M. Stallman [англ.] . — 3rd (ed.). — 2015. — P. 287. — ISBN 978-0-9831592-5-4 . Архивная копия от 7 августа 2022 на Wayback Machine ↑ Что такое свободное программное обеспечение? — Проект GNU — Фонд Свободного ПО (FSF) (неопр.) . Дата обращения: 31 марта 2009. Архивировано 24 июня 2008 года. ↑ “Sell software” (англ.) . Words to Avoid (or Use with Care) Because They Are Loaded or Confusing . Free Software Foundation . Дата обращения: 24 марта 2014. Архивировано 8 мая 2020 года. ↑ Почему “открытый исходный текст” не передает понятия “свободная программа” (неопр.) . Дата обращения: 4 ноября 2022. Архивировано 4 августа 2011 года. ↑ Categories of Free and Non-Free Software (англ.) . Free Software Foundation (31 декабря 2011). Дата обращения: 26 января 2012. Архивировано 27 августа 2011 года. ↑ Сергей Короп. Категории свободных и несвободных программ (неопр.) (3 января 2011). Дата обращения: 26 января 2012. Архивировано 27 августа 2011 года. ↑ Richard Stallman. Why «Open Source» misses the point of Free Software (англ.) (1 марта 2009). Дата обращения: 10 апреля 2009. Архивировано 21 августа 2011 года. ↑ Сайт компании UniPress (неопр.) . Дата обращения: 10 апреля 2007. Архивировано 24 января 2007 года. ↑ Что такое copyleft? (неопр.) Free Software Foundation (26 августа 2008). Дата обращения: 15 ноября 2008. Архивировано 21 августа 2011 года. ↑ Можно провести параллели между свободным ПО и Википедией: участники занимаются написанием статей в свободное время и из интереса; пользователь, заметивший ошибку, может её исправить; существует множество статей, не развившихся до подробных, и т. д. ↑ Цифровая экономика зависит от свободного ПО. Что с ним не так? (неопр.) Дата обращения: 20 мая 2024. Архивировано 20 мая 2024 года. ↑ В общественной лицензии GNU есть даже стандартная формулировка, закрепляющая отсутствие гарантий: «Настоящая программа поставляется на условиях „как есть“. Если иное не указано в письменной форме, автор и/или иной правообладатель не принимает на себя никаких гарантийных обязательств, как явно выраженных, так и подразумеваемых, в отношении программы, в том числе подразумеваемую гарантию товарного состояния при продаже и пригодности для использования в конкретных целях, а также любые иные гарантии». (перевод Елены Тяпкиной). ↑ См. статью об этом Архивная копия от 2 сентября 2011 на Wayback Machine Тима О’Рейли . ↑ Достаточно упомянуть такую сложную систему, как Windows , с десятками мегабайт исполнимого кода и не имеющую свободно распространяемых исходных текстов, чтобы понять масштабы и сложность современных патчей. ↑ Хорошим и понятным непрограммисту примером системы управления версиями является и Википедия. ↑ Lawrence Lessig. How Big Media uses technology and the law to lock down culture and control creativity (англ.) (1 мая 2010). Дата обращения: 1 мая 2010. Архивировано из оригинала 21 августа 2011 года. ↑ Условно — потому, что далеко не во всех странах [ уточнить ] разрешено выдавать патенты на программное обеспечение, однако, везде отношения собственности на исходные тексты программ регулируются общими или специальными разделами законов об авторском праве . ↑ 20 Jahre Linux — Freie Software für Jedermann? (нем.) . Bayerisches Rundfunk (15 сентября 2011). Дата обращения: 28 сентября 2011. Архивировано 2 февраля 2012 года. ↑ Открытое ПО завоёвывает мобильный рынок (неопр.) . @ASTERA (3 июля 2009). Дата обращения: 2009. Архивировано 4 июля 2009 года. ↑ Интернет-портал Правительства Российской Федерации ↑ Госорганы перейдут на свободное программное обеспечение (неопр.) . Дата обращения: 22 мая 2011. Архивировано 28 октября 2011 года. ↑ Уведомление об утверждении ГОСТ Р 54593-2011 (неопр.) . Дата обращения: 27 декабря 2011. Архивировано 14 января 2012 года. ↑ В России стартует гигантский Linux-проект (неопр.) (21 ноября 2011). Дата обращения: 28 декабря 2014. Архивировано 29 декабря 2014 года. ↑ Российская общественная инициатива (неопр.) . Дата обращения: 15 апреля 2013. Архивировано 1 мая 2013 года. ↑ Приняты поправки в Гражданский кодекс Российской Федерации, касающиеся открытых лицензий (аналогичных лицензиям Creative Commons и GNU FDL) (неопр.) . Creative Commons . Дата обращения: 6 апреля 2014. Архивировано из оригинала 23 сентября 2020 года. ↑ Федеральная служба судебных приставов РФ внедряет свой Linux-дистрибутив — GosLinux (неопр.) . nixp.ru (5 апреля 2014). Дата обращения: 6 апреля 2014. Архивировано 20 сентября 2015 года. ↑ Приставы будут работать в собственной операционной системе (неопр.) . ФССП (3 апреля 2014). Дата обращения: 6 апреля 2014. Архивировано 7 апреля 2014 года. ↑ Пресс-служба Министерства образования и науки Республики Хакасия . Они на «ТЫ» с отечественным Linux (неопр.) . Проект «Образование» (16 ноября 2009). Дата обращения: 19 апреля 2010. Архивировано 27 октября 2012 года. ↑ High Priority Free Software Projects (неопр.) . Free Software Foundation, Inc.. Дата обращения: 23 октября 2011. Архивировано 21 августа 2011 года. — список свободных проектов, которым требуется помощь в разработке либо использование и реклама. ↑ [1] Архивная копия от 25 декабря 2010 на Wayback Machine [Phoronix ] ZFS For Linux Is Now Available To The Public! ↑ [Phoronix] Is Windows 7 Actually Faster Than Ubuntu 10.04? Литература [ править | править код ] Алексей Федорчук. Девять дней, которые потрясли Open Source Александр Кондрушенко. Регламентация правоотношений по использованию компьютерных программ с общедоступным исходным текстом (автореферат диссертации) (недоступная ссылка) Георгий Лыскин. Социальная структура виртуальных сетевых сообществ разработчиков программного обеспечения с открытыми кодами (автореферат диссертации) Как украсть Linux? — о FOSS-лицензиях и их применении в России Технологии Linux Open Source // Труды международной школы-семинара, М.: 2006. Ссылки [ править | править код ] Медиафайлы на Викискладе Портал «Свободное программное обеспечение» История возникновения свободного ПО Глоссарий Рабочей группы по изучению вопросов разработки и использования свободного программного обеспечения в Российской Федерации Бизнес-модели свободного ПО Сообщество борьбы за свободу софта, контента и форматов Perspectives on Free and Open Source Software (англ.) Типы лицензий на использование ПО Ссылки на внешние ресурсы В библиографических каталогах BNE : XX549777 BNF : 13537550p J9U : 987007563587405171 LCCN : sh86005933 SUDOC : 050678051 Ключевые персоны движения за свободное программное обеспечение Рик Адамс Брайан Белендорф Кит Бостик Джим Геттис Джон Гилмор Мигель де Икаса Линн и Уильям Джолиц Гаэль Дюваль Алан Кокс Роберт Лав Расмус Лердорф Лоуренс Лессиг Маршалл Кирк Мак-Касик Юкихиро Мацумото Иан Мёрдок Эбен Моглен Эрик Оллман Тим О’Райли Джон Аустерхаут Кит Паккард Брюс Перенс Брайан Пол Тео де Раадт Гвидо ван Россум Эрик Реймонд Ричард Столлман Линус Торвальдс Эндрю Триджелл Теодор Цо Ларри Уолл Джордан Хаббард Джон Холл Марк Шаттлворт Боб Шифлер Маттиас Эттрих Свободное и открытое программное обеспечение Главное СПО Определение Критерии Debian Gratis versus libre Сравнение хостингов СПО Открытое ПО Определение Определение свободных произведений культуры Дистрибутив Linux Сравнение ПО с открытым и закрытым кодом [англ.] Сообщество Движение СПО История GNU Linux Open-source-software movement [англ.] организации [англ.] Linux-конференции Организации ASF Blender Foundation Eclipse Foundation FreeBSD Foundation [англ.] freedesktop.org FSF FSMI GNOME Foundation Проект GNU Google Code KDE e.V. Linux Foundation Mozilla Foundation OSGF [англ.] OSI Software Freedom Conservancy SourceForge The Document Foundation Xiph.Org XMPP Standards Foundation X.Org Foundation Лицензии Apache Artistic [англ.] Beerware BSD GNU GPL GNU LGPL ISC MIT MPL Ms-PL/RL zlib Public domain / CC0 WTFPL Разрешительные лицензии Apple Public Source License Python Software Foundation License Копилефт Проблемы Разнообразие лицензий Безопасность [англ.] Блоб Программные патенты DRM Тивоизация Trusted Computing Конфликт SCO — Linux Прочее Сообщество Форк Microsoft Open Specification Promise [англ.] Проприетарное ПО Собор и Базар Ради удовольствия Revolution OS Категория Викисклад Портал Распространение программного обеспечения Лицензии Свободное Свободное и открытое Бесплатное Открытое Проприетарное В общественном достоянии Модели дохода Бесплатное Freemium Условно-бесплатное Adware Demoware Donationware Nagware Postcardware Коммерческое Методы доставки On-premises Предустановленное Бандл SaaS (Software on-demand) Software plus services Обманные/незаконные Вредоносная программа Черви Троян Spyware Лжеантивирус Vaporware Прочее Abandonware Активация продукта Shovelware Легализация ПО Произведение с недоступным правообладателем Независимая продукция [англ.] Чтение Альтернативная манга [англ.] Додзинси Комиксы альтернативные [англ.] веб вебтун подпольные Любительская ассоциация прессы [англ.] Малая пресса [англ.] Самостоятельная публикация [англ.] Фэнзин Слушание Кассетная культура [англ.] Музыка андеграундная [англ.] додзин инди поп рок фолк электроника трекерная Независимый музыкальный лейбл нет-лейбл Подсейф [англ.] Радио независимое [англ.] пиратское Экспериментальные музыкальные инструменты Lo-Fi Кино Безбюджетный фильм [англ.] Двойной сеанс [англ.] Кино трансгрессии [англ.] Любительское кино Любительский фильм [англ.] порнография Малобюджетный фильм Машинима Независимая анимация [англ.] Независимый кинематограф Ноу-вейв кино [англ.] Партизанское кино [англ.] Полуночный фильм Фан-фильм Фильм категории B Фильм категории Z Эксплуатационное кино Компьютеры Варез-группа Демосцена Додзин-софт [англ.] Инди-игра ролевая игра [англ.] список разработчиков [англ.] Ковбойское кодирование [англ.] Модификация Неофициальный патч Открытое программное обеспечение Ромхакинг Свободная компьютерная игра Свободное программное обеспечение Фанатская игра Homebrew Понятия Додзин Инди-культура Ноу-вейв См. также Ар-брют Вернакулярная фотография [англ.] Взлом программного обеспечения Изгиб цепи [англ.] Крафтовое пивоварение Мейл-арт Наивное искусство Самодельничество Социальные одноранговые процессы [англ.] Make [англ.] Maker Faire [англ.] Источник — https://ru.wikipedia.org/w/index.php?title=Свободное_программное_обеспечение&oldid=142615640 Категории : Свободное программное обеспечение Лицензии на программное обеспечение Скрытые категории: Википедия:Cite web (не указан язык) Википедия:Cite web (заменить webcitation-архив: deadlink no) Википедия:Cite web (заменить webcitation-архив: deadlink yes) Википедия:Статьи, требующие уточнения источников Википедия:Статьи с шаблонами недостатков по алфавиту Страницы, использующие волшебные ссылки ISBN Википедия:Статьи, подозреваемые в наличии оригинальных исследований с января 2022 года Википедия:Статьи без источников (не распределённые по типам) Википедия:Нет источников с января 2022 Википедия:Статьи с утверждениями без источников более 14 дней Википедия:Нет источников с августа 2023 Википедия:Статьи, требующие внесения ясности Википедия:Статьи, нейтральность которых поставлена под сомнение Википедия:Статьи с неизвестными терминами Википедия:Нет источников с февраля 2015 Википедия:Статьи, требующие конкретизации Википедия:Стилистически некорректные статьи Википедия:Статьи для обновления с октября 2019 года Википедия:Статьи для обновления Википедия:Статьи с нерабочими ссылками Статьи со ссылками на Викисклад Статьи со ссылками на портал Навигация Поиск